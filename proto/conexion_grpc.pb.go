// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/conexion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BD_Set_FullMethodName       = "/conexion.BD/set"
	BD_Get_FullMethodName       = "/conexion.BD/get"
	BD_GetPrefix_FullMethodName = "/conexion.BD/getPrefix"
	BD_ResetDb_FullMethodName   = "/conexion.BD/resetDb"
)

// BDClient is the client API for BD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BDClient interface {
	Set(ctx context.Context, in *Insertar, opts ...grpc.CallOption) (*RespuestaSet, error)
	Get(ctx context.Context, in *Consultar, opts ...grpc.CallOption) (*RespuestaGet, error)
	GetPrefix(ctx context.Context, in *Consultar, opts ...grpc.CallOption) (*RespuestaGetPrefix, error)
	ResetDb(ctx context.Context, in *RequestResetDb, opts ...grpc.CallOption) (*RespuestaReset, error)
}

type bDClient struct {
	cc grpc.ClientConnInterface
}

func NewBDClient(cc grpc.ClientConnInterface) BDClient {
	return &bDClient{cc}
}

func (c *bDClient) Set(ctx context.Context, in *Insertar, opts ...grpc.CallOption) (*RespuestaSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaSet)
	err := c.cc.Invoke(ctx, BD_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDClient) Get(ctx context.Context, in *Consultar, opts ...grpc.CallOption) (*RespuestaGet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaGet)
	err := c.cc.Invoke(ctx, BD_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDClient) GetPrefix(ctx context.Context, in *Consultar, opts ...grpc.CallOption) (*RespuestaGetPrefix, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaGetPrefix)
	err := c.cc.Invoke(ctx, BD_GetPrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDClient) ResetDb(ctx context.Context, in *RequestResetDb, opts ...grpc.CallOption) (*RespuestaReset, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaReset)
	err := c.cc.Invoke(ctx, BD_ResetDb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BDServer is the server API for BD service.
// All implementations must embed UnimplementedBDServer
// for forward compatibility.
type BDServer interface {
	Set(context.Context, *Insertar) (*RespuestaSet, error)
	Get(context.Context, *Consultar) (*RespuestaGet, error)
	GetPrefix(context.Context, *Consultar) (*RespuestaGetPrefix, error)
	ResetDb(context.Context, *RequestResetDb) (*RespuestaReset, error)
	mustEmbedUnimplementedBDServer()
}

// UnimplementedBDServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBDServer struct{}

func (UnimplementedBDServer) Set(context.Context, *Insertar) (*RespuestaSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedBDServer) Get(context.Context, *Consultar) (*RespuestaGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBDServer) GetPrefix(context.Context, *Consultar) (*RespuestaGetPrefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrefix not implemented")
}
func (UnimplementedBDServer) ResetDb(context.Context, *RequestResetDb) (*RespuestaReset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDb not implemented")
}
func (UnimplementedBDServer) mustEmbedUnimplementedBDServer() {}
func (UnimplementedBDServer) testEmbeddedByValue()            {}

// UnsafeBDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BDServer will
// result in compilation errors.
type UnsafeBDServer interface {
	mustEmbedUnimplementedBDServer()
}

func RegisterBDServer(s grpc.ServiceRegistrar, srv BDServer) {
	// If the following call pancis, it indicates UnimplementedBDServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BD_ServiceDesc, srv)
}

func _BD_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Insertar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BD_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDServer).Set(ctx, req.(*Insertar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BD_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consultar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BD_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDServer).Get(ctx, req.(*Consultar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BD_GetPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consultar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDServer).GetPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BD_GetPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDServer).GetPrefix(ctx, req.(*Consultar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BD_ResetDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResetDb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDServer).ResetDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BD_ResetDb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDServer).ResetDb(ctx, req.(*RequestResetDb))
	}
	return interceptor(ctx, in, info, handler)
}

// BD_ServiceDesc is the grpc.ServiceDesc for BD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conexion.BD",
	HandlerType: (*BDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "set",
			Handler:    _BD_Set_Handler,
		},
		{
			MethodName: "get",
			Handler:    _BD_Get_Handler,
		},
		{
			MethodName: "getPrefix",
			Handler:    _BD_GetPrefix_Handler,
		},
		{
			MethodName: "resetDb",
			Handler:    _BD_ResetDb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/conexion.proto",
}
